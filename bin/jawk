#!/usr/bin/perl -w
use strict;

# OK. First of all. We know that this LOOKS ugly - but we promise -- it's not.
# 
# jawk. like 'awk', but Joshy and Perly.
# Copyright 2011-2012 (c) Josh Rabinowitz
#
# USES NO EXTERNAL MODULES 
#use Memoize;       # we're actually not even using memoize now. 
#                   # one test showed that using memoize() for
#                   # convert_args_to_fields() sped up runtime by ~25%
#
my $prog = "jawk";
our $VERSION = 0.04;
my $exclude;
my $delimiter = ' ';
my $joiner = ' ';
my $awky = 0;       # if we're awky then we use $1 $2 $3 and not @F
my $debug = 0;
my $warnings = 0;   # do we show warnings for code run via -e ?

# Jawk: like awk '{print $N}', and much more. Use like 
# 'ps -auxwww | grep something | jawk 2'
# NOTE: use -- option to pass files on the command line.
#
# We _Don't_ use Getopt::Long, because we're not sure how to 
# shoehorn our argument processing logic into it. 
#
# Specifically, we need to handle negative and positive numbers 
# (let's call them A and B) and various A..B-type ranges as options.
# (e.g.: A, ..B, A.., and A..B).
#
# Note that allowing un-hyphened options which are not filenames is convenient...
#  but probably breaks POSIX recommendations.
#
# Our closest 'role model' (other than the anachronistic awk) 
#  is cut, which uses -f 'fields' to specify fields :/, no ranges, no exclusion option, etc.
# Also, cut uses 'tab' as its default delimiter: jawk uses whitespace [specifically split(' ', $line),
#  which acts more like awk] as its default delimiter.
#
############################################
main();

############################################
sub Usage {
    return  "$prog [-x] [-e 'code'] [-d delim] fieldspec [fieldspec...] [-- (FILES..)]:\n" .
            " jawk 1 is like awk '{print \$1}'.\n"  .
            "   jawk also allows ranges with '..'. For example:\n" .
            "   Fieldspec can be like A, A..B, A.., or ..B (A and B are + or - ints).\n" .
            "   Negative values for A and B count backwards so -1 is the last field.\n" .
            "   (NOTE: use -- or - FILENAME.txt to read from files\n" .
            "    '--' is needed to treat FILENAME.txt as file and not fieldspec.)\n";
            "   -d delimiter\n" .
            "   -D turns on DEBUG mode\n" .
            "   -j joiner\n" .
            "   -x means _don't_ show the numbered fields, and show the others.\n" .
            "   -e 'print \"\@F\n\"'   : more like awk but with \@F, and perl\n" .
            "   -w means 'use warnings' for perlcode run via -e\n";
            #"   -a is for old (deprecated) 'awky' mode with \$1 \$2 etc (from perl)\n" .
}

############################################
sub main {
    #memoize( 'convert_args_to_fields' ); # this speeds up named-query-stats from 2.33 to 1.7 minutes (~25%).
    my @args;

    my $exe = "";   # whatever perl code we should execute for each line

    # HANDLE Command Line Processing... Manually!
    #
    # shift items off @ARGV, processing as we go along, 
    #  putting fields like 1, 1.. or 1..2 etc into @args
    #
    # With all the code below, we've finally replicated most of Getopt::Long's -- option :).
    # Except Getopt::Long doesn't store away @args and @ARGV separately like we do.
    #  (although it would be nice to support named options like --version).
    ARGVLOOP:
    while( defined($_ = shift @ARGV) ) {    # manual handling of command-line options
        if    (/^-x/)   { $exclude = 1; }                                 # -x option
        #elsif (/^-a/)   { $awky = 1;    }    # -a is DEPRECATED         # -a option, $1 instead of @F  # AWK MODE IS DISABLED
        elsif (/^-D/)   { $debug = 1;    }                              # debug
        elsif (/^-w/)   { $warnings = 1;    }                            # turn on perl warnings -e code
        elsif (/^-e$/)  { $exe .= shift( @ARGV )      || die "$prog: -e (exe) needs param\n"; }
        elsif (/^-e=(.*)$/)  { $exe .= $1             || die "$prog: -e (exe) needs param\n"; }
        elsif (/^-d$/)  { $delimiter = shift( @ARGV ) || die "$prog: -d (delim) needs param\n"; }
        elsif (/^-d=(.*)$/)  { $delimiter = $1        || die "$prog: -d (delim) needs param\n"; }
        elsif (/^-j$/)  { $joiner = shift( @ARGV )    || die "$prog: -j (joiner) needs param\n"; }
        elsif (/^-j=(.*)$/)  { $joiner = $1           || die "$prog: -j (joiner) needs param\n"; }
        elsif (/^-\d+/) { push(@args, $_); }                              # negative digits
        elsif (/^--?$/) { last ARGVLOOP; }                                # stop processing at - or --
        elsif (/^-/)    { die "$prog: Option not understood: $_\n" . Usage(); }  # other -options
        else            { push(@args, $_); }                              
        # ok; non-hyphenated option like digit or ..
    } 

    #print "$prog: args passed: @ARGV\n" if $debug;
    warn "$prog: Doesn't make sense to use numbered fields and -e, fields ignored\n" if ($exe && @args);

    my $quote_meta_delimiter = defined($delimiter) ? quotemeta( $delimiter ) : "";
    # read lines with the magical diamond operator. note use of '--' option, documented above.
    while( defined( my $line = <> ) ) {
        chomp($line);

        # split the line into parts
        my @parts;
        if ($delimiter eq ' ' ) {
            @parts = split( ' ', $line );	    # ' ' is a special case with split, which acts special. look it up!
        } else { 
            @parts = split(/$quote_meta_delimiter/, $line);	    # so you can split on chars like "("
            #shift(@parts) while (@parts && $parts[0] =~ /^\s*$/);  # should we strip leading blank fields?
        }

        if ($exe) { # if we have an exe from the command line, run it for each input line
            # if they passed a line to execute, then run it for each line we read 
            my $exe_expanded = replace_exe_vars( $exe, \@parts );   # expand to perl script
            eval "$exe_expanded";      # string eval.
            warn "$prog: Error running: $exe_expanded: $@\n" if $@;
        } else {    # otherwise, pull out fields via numbered args.

            # convert the args (things from @ARGV that don't look like command-line options)
            # into fields. Must be done for each line, because we need the
            # number of elements.
            print STDERR "args are @args, parts are @parts\n" if $debug;
            my @fields = convert_args_to_fields( \@args, scalar(@parts) );
            
            # if we're in -x mode, invert the fields to
            # figure out which are left after exclusions.
            if ($exclude) {	
                @fields = invert_fields( \@fields, scalar(@parts) );
            }

            print (join($joiner, @parts[@fields]) . "\n");
        }
    }
    exit(0);    # done
}

############################################
# my $exe_expanded = replace_exe_vars( $exe, \@fields )
sub replace_exe_vars {
    my ($exe, $fieldsref) = @_;
    my @fields = @$fieldsref;

    # AWK MODE IS DISABLED ABOVE
    if ($awky) { 
        # awky style, to be deprecated. Replace $1 $2 $3 etc.
        #   since we can't actually assign to $1, $2, $3, etc easily,
        #   we manually parse out $\d+ and ${\d+} sequences from the exe string they pass
        #   and pass back a string to be eval'ed :)
        #print "incoming exe: $exe; [@fields]\n";
        #$exe =~ s/ \$ ([0-9]+) /my $c = $fields->[\$1-1];\\$c/geex; # $fields->[$1-1]/xg;
        while( $exe =~ m/ \$ ([0-9]+) /x) {
            my $field = $1;
            my $search = '\$' . $field;
            
            my $replace = ($field > 0 && $field <= @$fieldsref) ? $fieldsref->[$field-1] : "";
            #print "$prog: Replacing field $field: $search with $replace\n";
            $exe =~ s/ $search /$replace/xg;
        }
    } else {    # non awky style, this is recommended
        # $exe holds the code to run on @F
        use vars qw( @F );  # make a global @F
        @F = @$fieldsref;       # yes we 0-th element, because @F IS NORMAL PERL!
        my $tmpexe = "no strict; ";
        $tmpexe .= "no warnings; " unless $warnings;
        $tmpexe .= $exe;
        $exe =  $tmpexe;
    }
    #print "outgoing exe: $exe\n";
    return $exe;
}


#########################################################
# convert_args_to_fields( $args_ref, $numparts_in_line )
# args come in 1-based (or negative), and are returned 0-based
# handles ranges like 1..3 or 3..1
# as well as negative args alone or in ranges,
# like -2..1, or like -1..1
#  note: could probably be optimized 20-30% by doing this all in one giant map{}
sub convert_args_to_fields {
    my ($args_ref, $numparts) = @_;
    return () unless $numparts;
    
    print STDERR "$prog: 0: initially   (@$args_ref)\n" if $debug;
   
    my $numreg = '-?\d+';   # our 'number regex'

    # convert the user's fields to field numbers within the fields
    # parse the command line arguments for ints and ranges like a..b ,  a.. , and b.. .
    # skip indexes that we don't have a value for, and
    # shift each int down by one; 1-based to 0-based.
    # (This was originally more broken up for clarity, but we optimized (and shortened)
    # it to this.)
    my @ret = map { $_ - 1 } 
            grep {$_ <= $numparts && $_ >= 1 } 
             map { /^$numreg$/                ? (_converted_version($_, $numparts)) :   # ** a single int
                  /^($numreg)\.\.($numreg)$/ ? (get_range($1, $2, $numparts))  :       # ** an int range
                  /^($numreg)\.\.$/          ? (get_range($1, $numparts, $numparts)) : # ** an integer and up
                  /^\.\.($numreg)$/          ? (get_range(1, $1, $numparts)) :         # ** up to an integer
                    die "$prog: Don't know how to handle field '$_'\n" . Usage();
            }
         @$args_ref;
    print STDERR "$prog: 1: modified to (@ret)\n" if $debug;

    return @ret;
}

############################################
# invert_fields( [ 1, 2], 3 );# ( [activated], num_fields )
# choose the opposite of whatever's currently selected from num_fields.
# all indexes have been converted to normal 0-based perl style.
sub invert_fields {
    my ($fieldsref, $numparts) = @_;
    my %fieldshash = map { ( $_, undef ) } @$fieldsref;	 # keys are fields for exclusion
    my @inversefields = grep { !exists($fieldshash{$_}) } ( 0 .. $numparts-1);      # this is correct
    return @inversefields;       # all the other fields
}

############################################
# get_range( $a, $b )
#  where $a and $b are indexes as specified by user.
#  Converts $a and $b to positive versions, and 
#  returns all the possible ints from $a to $b, inclusive
#  handles descending lists, unlike perl's '..'  :)
sub get_range {
    my ($a, $b, $numparts) = @_;
    $a = _restrict_to_possible( _converted_version($a, $numparts), $numparts);
    $b = _restrict_to_possible( _converted_version($b, $numparts), $numparts);
    if ( $a <= $b ) { return ($a..$b); }
    return (reverse($b..$a));    # they asked for a list in reverse. make it ascending, and reverse it.
                                 # or as Missy Elliott would say - flip it and reverse it.
}

############################################
# $num = _converted_version( $num, $numparts ) 
# returns the int $numparts converted to be as if it were sane and 1-based.
# returns 0 if there arent as many columns are requested 
# (IE, there are seven columns and you ask for the eighth).
sub _converted_version {
    my ($num, $numparts) = @_;
    if ($num < 0) {
        $num = $numparts + $num + 1;
    }
    return $num;
}

############################################
# $num = _restrict_to_possible( $index, $numparts );
# restricts an input index within the range 
# of possible positive indexes for this row.
sub _restrict_to_possible {
    my ($num, $numparts) = @_;
    if ($num < 0) { $num = $numparts ? 1 : 0; }
    if ($num > $numparts) { $num = $numparts; }
    return $num;
}


############################################
# pod docs moved to lib/App/Jawk.pm
# this is just here for the documentation

1;

=head1 NAME

jawk -- like awk, but post-modern and perly. AKA, Josh's Awk.

=head1 SYNOPSIS

See documentation for <App::Jawk>

=head1 DESCRIPTION

See documentation for <App::Jawk>

=head1 COPYRIGHT

Copyright (c) 2010-2012 Josh Rabinowitz, All Rights Reserved.

=head1 AUTHORS

Josh Rabinowitz

=cut    


